{"version":3,"sources":["../src/utils/file-reader-utils.js"],"names":["readFile","access","fs","readPackage","directory","data","sep","name","version","license","dependencies","devDependencies","repository","JSON","parse","isExisting","err","getDependencyDirectory","dependency","baseDir","relativeDependency","baseDependency","getChildDependencyDirectories","Promise","all","map"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA,MAAM;AAACA,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAqBC,YAA3B;;AAEO,eAAeC,WAAf,CAA2BC,SAA3B,EAAsC;AAC3C,QAAMC,IAAI,GAAG,MAAML,QAAQ,CAAE,GAAEI,SAAU,GAAEE,SAAI,cAApB,CAA3B;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,YAAzB;AAAuCC,IAAAA,eAAvC;AAAwDC,IAAAA;AAAxD,MAAsEC,IAAI,CAACC,KAAL,CAAWT,IAAX,CAA5E;AACA,SAAO;AAACE,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,YAAzB;AAAuCC,IAAAA,eAAvC;AAAwDC,IAAAA;AAAxD,GAAP;AACD;;AAEM,eAAeG,UAAf,CAA0BX,SAA1B,EAAqC;AAC1C,MAAI;AACF,UAAMH,MAAM,CAACG,SAAD,CAAZ;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOY,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF;;AAEM,eAAeC,sBAAf,CAAsCC,UAAtC,EAAkDd,SAAlD,EAA6De,OAAO,GAAGf,SAAvE,EAAkF;AACvF,QAAMgB,kBAAkB,GAAI,GAAEhB,SAAU,GAAEE,SAAI,eAAcA,SAAI,GAAEY,UAAW,EAA7E;AACA,QAAMG,cAAc,GAAI,GAAEF,OAAQ,GAAEb,SAAI,eAAcA,SAAI,GAAEY,UAAW,EAAvE;;AACA,MAAI,MAAMH,UAAU,CAACK,kBAAD,CAApB,EAA0C;AACxC,WAAOA,kBAAP;AACD,GAFD,MAEO,IAAI,MAAML,UAAU,CAACM,cAAD,CAApB,EAAsC;AAC3C,WAAOA,cAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF;;AAEM,SAASC,6BAAT,CAAuCZ,YAAvC,EAAqDN,SAArD,EAAgEe,OAAO,GAAGf,SAA1E,EAAqF;AAC1F,SAAOmB,OAAO,CAACC,GAAR,CAAYd,YAAY,CAACe,GAAb,CAAiBP,UAAU,IAAID,sBAAsB,CAACC,UAAD,EAAad,SAAb,EAAwBe,OAAxB,CAArD,CAAZ,CAAP;AACD","sourcesContent":["import { promises as fs } from 'fs';\nimport { sep } from 'path';\n\nconst {readFile, access} = fs;\n\nexport async function readPackage(directory) {\n  const data = await readFile(`${directory}${sep}package.json`);\n  const {name, version, license, dependencies, devDependencies, repository} = JSON.parse(data);\n  return {name, version, license, dependencies, devDependencies, repository};\n}\n\nexport async function isExisting(directory) {\n  try {\n    await access(directory);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDependencyDirectory(dependency, directory, baseDir = directory) {\n  const relativeDependency = `${directory}${sep}node_modules${sep}${dependency}`;\n  const baseDependency = `${baseDir}${sep}node_modules${sep}${dependency}`;\n  if (await isExisting(relativeDependency)) {\n    return relativeDependency;\n  } else if (await isExisting(baseDependency)) {\n    return baseDependency;\n  } else {\n    return null;\n  }\n}\n\nexport function getChildDependencyDirectories(dependencies, directory, baseDir = directory) {\n  return Promise.all(dependencies.map(dependency => getDependencyDirectory(dependency, directory, baseDir)));\n}\n\n"],"file":"file-reader-utils.js"}